(define-syntax __define__ define)
(define-syntax define (syntax-rules () 
    ((define (x . l)  p ) (define x (lambda l p)))
    ((define (x . l)) (define x (lambda l ())))
    ((define (x . l) . p ) (define x (lambda l (begin . p)))) 
    ((define x y) (__define__ x y))))

(define-syntax __lambda__ lambda)
(define-syntax lambda (syntax-rules ()
    ((lambda params) (__lambda__ params ()))
    ((lambda params b) (__lambda__ params b))
    ((lambda params . l) (__lambda__ params (begin . l)))
    ))

(define-syntax and (syntax-rules ()
    ((and) #t)
    ((and test) test)
    ((and test1 test2 . l) (if test1 (and test2 . l) #f))
    ))

(define-syntax or (syntax-rules ()
    ((or) #f)
    ((or test) test)
    ((or test1 test2 . l) 
    (let ((x test1)) (if x x (or test2 . l))))
    ))

(define-syntax let (syntax-rules ()
    ((let ((name val)) . b)
        ((lambda (name) . b) val ))
    ((let ((name val) (name2 val2) . l) . b)
        ((lambda (name) (let ((name2 val2) . l) . b ) ) val ))
    ((let tag ((name val)) . b)
        ((letrec ((tag (lambda (name) . b))) tag) val))
    ((let tag ((name val) (name2 val2) . l) . b)
        ((letrec ((tag (lambda (name) 
          (let tag ((name2 val2) . l) . b)
          ))) tag) val))
    ))

(define-syntax let* (syntax-rules ()
    ((let* () . b)
      (let () . b))
    ((let* ((name val)) . b)
      (let ((name val)) . b))
    ((let* ((name val) (name2 val2) . l) . b)
      (let ((name val)) (let* ((name2 val2) . l) . b) ))
))

(define-syntax letrec let*)

(define-syntax let-syntax (syntax-rules ()
    ((let-syntax ((name syn)) . b)
      ((lambda () (define-syntax name syn) . b))
    )
    ((let-syntax ((name syn) (name2 syn2) . l) . b)
      ((lambda () (define-syntax name syn) (let-syntax ((name2 syn2) . l) . b) ))
    )
))

(define-syntax cond
  (syntax-rules (else =>)
    ((cond (else result1 . r))
     (begin result1 . r))
    ((cond (test => result))
       (if test result))
    ((cond (test => result) clause1 . c)
       (if test
           result
           (cond clause1 . c)))
    ((cond (test)) test)
    ((cond (test) clause1 . c)
     (let ((temp test))
       (if temp
           temp
           (cond clause1 . c))))
    ((cond (test result1 . r))
     (if test (begin result1 . r)))
    ((cond (test result1 . r)
           clause1 . c)
     (if test
         (begin result1 . r)
         (cond clause1 . c)))))

(define-syntax case (syntax-rules (else)
  ((case (key . k) clauses . c)
    (let ((atom-key (key . k)))
    (case atom-key clauses . c)))
  ((case key (else result1 . r))
    (begin result1 . r))
  ((case key ((atoms . a) result1 . r))
    (if (memv key '(atoms . a))
      (begin result1 . r)))
  ((case key ((atoms . a) result1 . r) clause . c)
    (if (memv key '(atoms . a))
      (begin result1 . r)
      (case key clause . c)))))


    (define-syntax loop (syntax-rules ()
      ((loop . b)
        (letrec ((__func__
          `(lambda () ,@b (__func__))
        )) (__func__))
      )
    ))

    (define-syntax while (syntax-rules ()
      ((while pred . b)
        `(call/cc (loop ,@b (if (not pred) (ret ())) ) )
      )
    ))


    (define (> x y) (< y x))
    (define (>= x y) (<= y x))

    (define (abs x) (if (> x 0) x (- 0 x)))
    (define (map_iter ret func x . l) (if (null? l) (cons (func x) ret) (map_iter (cons (func x) ret)  func . l)))

    (define (reverse l) (map_iter () (lambda (x) x) . l))
    (define (map func l) (reverse (map_iter () func . l)))
    (define (range_iter ret n) (if (<= n 0) (cons n ret) (range_iter (cons n ret) (- n 1))))
    (define (range n) (range_iter () (- n 1)))
    (define (length_iter ret x . l) (if (null? l) (+ ret 1) (length_iter (+ ret 1) . l)))
    (define (length l) (if (null? l) 0 (length_iter 0 . l)))

    (define (car (x . y)) x)
    (define (cdr (x . y)) y)
    (define (caar ((x . y) . z)) x)
    (define (cadr (x y . z)) y)
    (define (cdar ((x . y) . z)) y)
    (define (cddr (x y . z)) z)
    (define (cdadr (x (y . z) . w)) z)
    (define (caadr (x (y . z) . w)) y)
    (define (caddr (x y z . w)) z)
    (define (cdddr (x y z . w)) w)

    (define (exit))
    (define (cmds cmd arg . l) (if (null? l) (cmd arg) (begin (cmd arg) (cmds cmd . l))))
    (begin (define dd display) (define (displays . l) (cmds dd . l)) (set! display displays))
    (define (error x . l) (define (error-1 x) (begin (display 'err:) (display #\space) (display x) (display #\newline) )) (if (null? l) (begin (error-1 x) (exit)) (begin (error-1 x) (error . l))))

    ((lambda () (begin (define op +) (define opi (lambda (ret x . l) (if (null? l) (op ret x) (opi (op ret x) . l)))) (set! + (lambda l (opi . l))))))
    ((lambda () (begin (define op -) (define opi (lambda (ret x . l) (if (null? l) (op ret x) (opi (op ret x) . l)))) (set! - (lambda l (opi . l))))))
    ((lambda () (begin (define op *) (define opi (lambda (ret x . l) (if (null? l) (op ret x) (opi (op ret x) . l)))) (set! * (lambda l (opi . l))))))
    ((lambda () (begin (define op /) (define opi (lambda (ret x . l) (if (null? l) (op ret x) (opi (op ret x) . l)))) (set! / (lambda l (opi . l))))))
    



    (define-syntax amb (syntax-rules () ((amb . alts)
      `(let ((prev-amb-fail amb-fail))
       (call/cc
        (lambda (sk)

          ,@(map (lambda (alt)
                   `(call/cc
                     (lambda (fk)
                       (set! amb-fail
                         (lambda ()
                           (set! amb-fail prev-amb-fail)
                           (fk 'fail)))
                       (sk ,alt))))
                 'alts)

          (prev-amb-fail))))
    )
          ))


(define-syntax aaa (syntax-rules () ((aaa . l)
(map display 'l) )))



(quote
    (define (test bs) 
        (if bs (display "Test successful")  (display "Test failed") )
        (display #\newline) 
        bs)
    (define count 0)
    (define (inc ret)
        (set! count (+ 1 count))
        (display ret)
        (display #\space)
        ret)
    (and
        (begin
            (set! count 0)
            (and #t (inc #t) (inc #f) (inc #t) (inc #f))
            (test (= count 2)))
        (begin
            (set! count 0)
            (and #f (inc #t) (inc #f) (inc #t) (inc #f))
            (test (= count 0)))
        (begin
            (set! count 0)
            (or #t (inc #t) (inc #f) (inc #t) (inc #f))
            (test (= count 0)))
        (begin
            (set! count 0)
            (or #f (inc #f) (inc #f) (inc #t) (inc #f))
            (test (= count 3)))
    )


(define (newline) (display #\newline) )

(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item) (set-car! queue item))
(define (set-rear-ptr! queue item) (set-cdr! queue item))

(define (empty-queue? queue) (null? (front-ptr queue)))
(define (make-queue) (cons '() '()))

(define (front-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" queue)
      (car (front-ptr queue))))

(define (insert-queue! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
           (set-cdr! (rear-ptr queue) new-pair)
           (set-rear-ptr! queue new-pair)
           queue)))) 

(define (delete-queue! queue)
  (cond ((empty-queue? queue)
         (error "DELETE! called with an empty queue" queue))
        (else
         (set-front-ptr! queue (cdr (front-ptr queue)))
         queue))) 



(define (logical-and x y)
  (if (and (= x 1) (= y 1))
      1
      0))

(define (logical-or x y)
  (if (or (= x 1) (= y 1))
      1
      0))

(define (half-adder a b s c)
  (let ((d (make-wire)) (e (make-wire)))
    (or-gate a b d)
    (and-gate a b c)
    (inverter c e)
    (and-gate d e s)
    'ok))

(define (full-adder a b c-in sum c-out)
  (let ((s (make-wire))
        (c1 (make-wire))
        (c2 (make-wire)))
    (half-adder b c-in s c1)
    (half-adder a s sum c2)
    (or-gate c1 c2 c-out)
    'ok))

(define (inverter input output)
  (define (invert-input)
    (let ((new-value (logical-not (get-signal input))))
      (after-delay inverter-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! input invert-input)
  'ok)

(define (logical-not s)
  (cond ((= s 0) 1)
        ((= s 1) 0)
        (else (error "Invalid signal" s))))


(define (and-gate a1 a2 output)
  (define (and-action-procedure)
    (let ((new-value
           (logical-and (get-signal a1) (get-signal a2))))
      (after-delay and-gate-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! a1 and-action-procedure)
  (add-action! a2 and-action-procedure)
  'ok)


(define (or-gate a1 a2 output)
  (define (or-action-procedure)
    (let ((new-value
           (logical-or (get-signal a1) (get-signal a2))))
      (after-delay or-gate-delay
                   (lambda ()
                     (set-signal! output new-value)))))
  (add-action! a1 or-action-procedure)
  (add-action! a2 or-action-procedure)
  'ok)



(define (make-wire)
  (let ((signal-value 0) (action-procedures '()))
    (define (set-my-signal! new-value)
      (if (not (= signal-value new-value))
          (begin (set! signal-value new-value)
                 (call-each action-procedures))
          'done))
    (define (accept-action-procedure! proc)
      (set! action-procedures (cons proc action-procedures))
      (proc))
    (define (dispatch m)
      (cond ((eq? m 'get-signal) signal-value)
            ((eq? m 'set-signal!) set-my-signal!)
            ((eq? m 'add-action!) accept-action-procedure!)
            (else (error "Unknown operation -- WIRE" m 'ss))))
    dispatch))

(define (call-each procedures)
  (if (null? procedures)
      'done
      (begin
        ((car procedures))
        (call-each (cdr procedures)))))

(define (get-signal wire)
  (wire 'get-signal))

(define (set-signal! wire new-value)
  ((wire 'set-signal!) new-value))

(define (add-action! wire action-procedure)
  ((wire 'add-action!) action-procedure))

(define (after-delay delay action)
  (add-to-agenda! (+ delay (current-time the-agenda))
                  action
                  the-agenda))

(define (propagate)
  (if (empty-agenda? the-agenda)
      'done
      (let ((first-item (first-agenda-item the-agenda)))
        (first-item)
        (remove-first-agenda-item! the-agenda)
        (propagate))))

(define (probe name wire)
  (add-action! wire
               (lambda ()        
                 (newline)
                 (display name)
                 (display " ")
                 (display (current-time the-agenda))
                 (display "  New-value = ")
                 (display (get-signal wire)))))




(define (accept-action-procedure! proc)
  (set! action-procedures (cons proc action-procedures)))

(define (make-time-segment time queue)
  (cons time queue))
(define (segment-time s) (car s))
(define (segment-queue s) (cdr s))

(define (make-agenda) (list 0))

(define (current-time agenda) (car agenda))
(define (set-current-time! agenda time)
  (set-car! agenda time))

(define (segments agenda) (cdr agenda))
(define (set-segments! agenda segments)
  (set-cdr! agenda segments))
(define (first-segment agenda) (car (segments agenda)))
(define (rest-segments agenda) (cdr (segments agenda)))

(define (empty-agenda? agenda)
  (null? (segments agenda)))

(define (add-to-agenda! time action agenda)
  (define (belongs-before? segments)
    (or (null? segments)
        (< time (segment-time (car segments)))))
  (define (make-new-time-segment time action)
    (let ((q (make-queue)))
      (insert-queue! q action)
      (make-time-segment time q)))
  (define (add-to-segments! segments)
    (if (= (segment-time (car segments)) time)
        (insert-queue! (segment-queue (car segments))
                       action)
        (let ((rest (cdr segments)))
          (if (belongs-before? rest)
              (set-cdr!
               segments
               (cons (make-new-time-segment time action)
                     (cdr segments)))
              (add-to-segments! rest)))))
  (let ((segments (segments agenda)))
    (if (belongs-before? segments)
        (set-segments!
         agenda
         (cons (make-new-time-segment time action)
               segments))
        (add-to-segments! segments))))

(define (remove-first-agenda-item! agenda)
  (let ((q (segment-queue (first-segment agenda))))
    (delete-queue! q)
    (if (empty-queue? q)
        (set-segments! agenda (rest-segments agenda)))))

(define (first-agenda-item agenda)
  (if (empty-agenda? agenda)
      (error "Agenda is empty -- FIRST-AGENDA-ITEM")
      (let ((first-seg (first-segment agenda)))
        (set-current-time! agenda (segment-time first-seg))
        (front-queue (segment-queue first-seg)))))



 
 (define the-agenda (make-agenda))
 (define inverter-delay 2)
 (define and-gate-delay 3)
 (define or-gate-delay 5)
 
 (define input-1 (make-wire))
 (define input-2 (make-wire))
 (define sum (make-wire))
 (define carry (make-wire))
 
 (probe 'sum sum)
 (probe 'carry carry)
 

 (half-adder input-1 input-2 sum carry)
 (set-signal! input-1 1)
 (propagate)
 
 (set-signal! input-2 1)
 (propagate)
 
)




(define (read port)
    (let ((c (peek-char port)))
        (cond 
            ((char= c #\()
                ()

            )
            ((char= c #\1)
                1
            )
        )
    )
)